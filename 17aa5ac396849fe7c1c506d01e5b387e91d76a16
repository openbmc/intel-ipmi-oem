{
  "comments": [
    {
      "key": {
        "uuid": "7a26dd37_27d2169c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 15,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-31T17:48:12Z",
      "side": 1,
      "message": "I don\u0027t think this is true anymore.  ExternalSensor now provides the correct dbus paths.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 15,
        "endChar": 42
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ffa1ca4_22ca2260",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 15,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-04-01T18:55:58Z",
      "side": 1,
      "message": "Are they all under sensors/ path now?\n\nJosh@, do we have that issue internally?",
      "parentUuid": "7a26dd37_27d2169c",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 15,
        "endChar": 42
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06ecf1d6_749a972f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 15,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-04-02T03:03:28Z",
      "side": 1,
      "message": "This is for the phosphor-pid-control internally-generated sensors (used in the old JSON path, not the entity-manager path, of phosphor-pid-control configuration).\n\nThis is different from the new ExternalSensor module that I just recently added into dbus-sensors. The new ExternalSensor module keeps the standard /sensors/ object path. \n\nThe phosphor-pid-control program has the capability to synthesize sensors into existence, and it uses the /extsensors/ directory to hold them.\n\nhttps://github.com/openbmc/phosphor-pid-control/search?q\u003dextsensors\u0026type\u003dcode\n\nI\u0027m not sure why phosphor-pid-control chose to use the alternative /extsensors/ directory, and I\u0027m open to a patch that changes it back to /sensors/ which would make more sense.\n\nIt\u0027s also used in many different places, which is bad practice. It should be defined as a constant, in one place.",
      "parentUuid": "0ffa1ca4_22ca2260",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 15,
        "endChar": 42
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21b2783e_77a8060d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 15,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-04-14T18:11:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "06ecf1d6_749a972f",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 15,
        "endChar": 42
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "266f452a_47f87d68",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-31T17:48:12Z",
      "side": 1,
      "message": "Sensor set?",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 44,
        "endChar": 34
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0cf6a906_0e23c180",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-04-01T18:55:58Z",
      "side": 1,
      "message": "Ack. I accidentally removed the message from the last patch.",
      "parentUuid": "266f452a_47f87d68",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 44,
        "endChar": 34
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d061383a_71ab584e",
        "filename": "include/sdrutils.hpp",
        "patchSetId": 6
      },
      "lineNbr": 229,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-31T17:48:12Z",
      "side": 1,
      "message": "Does this class need to exist?  It\u0027s essentially a fancy wrapper around bool.  I suspect you can just use bool (or possibly enum class if you want to keep the definitions).",
      "range": {
        "startLine": 214,
        "startChar": 0,
        "endLine": 229,
        "endChar": 2
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53cdcbe6_6cc6345c",
        "filename": "include/sdrutils.hpp",
        "patchSetId": 6
      },
      "lineNbr": 229,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-04-01T18:55:58Z",
      "side": 1,
      "message": "Josh added this and in the original changes he mentioned that he needs it as a prerequisite for some new features that he wants.\n\nMaybe we can add that once that features comes in later?",
      "parentUuid": "d061383a_71ab584e",
      "range": {
        "startLine": 214,
        "startChar": 0,
        "endLine": 229,
        "endChar": 2
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d131799_76e86cef",
        "filename": "include/sdrutils.hpp",
        "patchSetId": 6
      },
      "lineNbr": 229,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-01T21:20:34Z",
      "side": 1,
      "message": "\u003e Josh added this and in the original changes he mentioned that he needs it as a prerequisite for some new features that he wants.\n\u003e \n\u003e Maybe we can add that once that features comes in later?\n\nFor the moment lets keep it simple.  If we need to add this class later for the features that necessitate it, we can always add it back then.",
      "parentUuid": "53cdcbe6_6cc6345c",
      "range": {
        "startLine": 214,
        "startChar": 0,
        "endLine": 229,
        "endChar": 2
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fee60377_603bcdbc",
        "filename": "include/sdrutils.hpp",
        "patchSetId": 6
      },
      "lineNbr": 229,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-04-02T03:03:28Z",
      "side": 1,
      "message": "I agree, this class is over-engineered. It was a skeleton for a later feature I ended up implementing elsewhere (it ended up being the timeout feature in ExternalSensor itself). I have no further plans for IPMIWriteEntry here. Feel free to refactor it.\n\nSince it\u0027s basically a wrapper around bool, feel free to make it just a bool somewhere. If there\u0027s a way to access the IPMI SDR from here, then we can pull it out of the SDR, since the external-set-allowed bit is one of the fields in the SDR.",
      "parentUuid": "5d131799_76e86cef",
      "range": {
        "startLine": 214,
        "startChar": 0,
        "endLine": 229,
        "endChar": 2
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f4fd284_24c801d9",
        "filename": "include/sdrutils.hpp",
        "patchSetId": 6
      },
      "lineNbr": 229,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-04-05T23:35:26Z",
      "side": 1,
      "message": "Done. I have just cleaned it up to use bool directly.",
      "parentUuid": "fee60377_603bcdbc",
      "range": {
        "startLine": 214,
        "startChar": 0,
        "endLine": 229,
        "endChar": 2
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa0c7c3a_a4662671",
        "filename": "include/sdrutils.hpp",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-31T17:48:12Z",
      "side": 1,
      "message": "The current external sensors in dbus-sensors doesn\u0027t define a new dbus namespace.  I suspect this isn\u0027t needed.",
      "range": {
        "startLine": 300,
        "startChar": 9,
        "endLine": 300,
        "endChar": 19
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac42f666_75c27253",
        "filename": "include/sdrutils.hpp",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-04-01T18:55:58Z",
      "side": 1,
      "message": "Are they all under sensors/ now?",
      "parentUuid": "aa0c7c3a_a4662671",
      "range": {
        "startLine": 300,
        "startChar": 9,
        "endLine": 300,
        "endChar": 19
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6453765d_26ada2f8",
        "filename": "include/sdrutils.hpp",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-01T21:20:34Z",
      "side": 1,
      "message": "yes: https://github.com/openbmc/dbus-sensors/blob/6205092af8f265933f11c3b92c4ca87f2b3bb8a2/src/ExternalSensor.cpp#L44",
      "parentUuid": "ac42f666_75c27253",
      "range": {
        "startLine": 300,
        "startChar": 9,
        "endLine": 300,
        "endChar": 19
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70ca7e5c_4d3c1983",
        "filename": "include/sdrutils.hpp",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-04-02T03:03:28Z",
      "side": 1,
      "message": "See the other comment I made. This was for the phosphor-pid-control internally-generated sensors, which are not part of the dbus-sensors package. Be careful not to confuse them with ExternalSensor which is a dbus-sensors module.",
      "parentUuid": "6453765d_26ada2f8",
      "range": {
        "startLine": 300,
        "startChar": 9,
        "endLine": 300,
        "endChar": 19
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2aa19f31_62875db1",
        "filename": "include/sdrutils.hpp",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-04-14T18:11:05Z",
      "side": 1,
      "message": "Ack. I have kept it due to phosphor-pid-control internally-generated sensors.",
      "parentUuid": "70ca7e5c_4d3c1983",
      "range": {
        "startLine": 300,
        "startChar": 9,
        "endLine": 300,
        "endChar": 19
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ff3e3b0_5e1effca",
        "filename": "include/sdrutils.hpp",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-15T19:24:46Z",
      "side": 1,
      "message": "In this case, I\u0027m confusing them with fan sensor, which is part of dbus sensors and has spec correct dbus interfaces.\n\nIf we plan to use phosphor-pid-controls external sensors long term, we should make them dbus-path compliant, but I suspect just using fansensor and externalsensor would be a better path forward here than adding new matches into sdrutils.",
      "parentUuid": "2aa19f31_62875db1",
      "range": {
        "startLine": 300,
        "startChar": 9,
        "endLine": 300,
        "endChar": 19
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f96c1f53_f186cdad",
        "filename": "include/sdrutils.hpp",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-04-19T16:15:33Z",
      "side": 1,
      "message": "So for now it sounds like I should remove the support for pid extsensors for now to get this patch forward... and maybe revisit it once we either fix extsensors to make them dbus-path compliant or just use existing fansensor and externalsensor.\n\n\n@Josh, can you comment on this?\n\nWould using fansensor and externalsensor take away some feature that we want to enable with pid\u0027s extsensors? Would this required just internal config changes?",
      "parentUuid": "8ff3e3b0_5e1effca",
      "range": {
        "startLine": 300,
        "startChar": 9,
        "endLine": 300,
        "endChar": 19
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "007bf913_29eec15a",
        "filename": "include/sdrutils.hpp",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-04-19T18:09:11Z",
      "side": 1,
      "message": "I am a bit confused about dbus-sensors ExternalSensors and phosphor-pid-control extsensors. They seem to overlap. Are there requirement differences or just different implementation?\nIf they do need to coexist and both need to be included in dynamic SDR, updating phosphor-pid-control to use sensors dbus path seems like a cleaner approach IMO.",
      "parentUuid": "f96c1f53_f186cdad",
      "range": {
        "startLine": 300,
        "startChar": 9,
        "endLine": 300,
        "endChar": 19
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "daeea2a6_138358c8",
        "filename": "include/sdrutils.hpp",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-04-20T21:28:40Z",
      "side": 1,
      "message": "As for phosphor-pid-control internally-generated sensors, I\u0027m not sure why they used the /extsensor/ name prefix, but I\u0027m sure there was a reason. Perhaps venture@ might know? Does anybody still have any active deployments that depend on this naming?\n\nI did not change it, on purpose, because I didn\u0027t want to break existing configuration, and if it\u0027s still working and not causing problems, I see no reason to change it. I\u0027m open to changing it for new deployments, however.\n\nThere is no overlap between dbus-sensors FanSensor and ExternalSensor objects, and these phosphor-pid-control internally-generated sensor objects. That might be one of the reasons the name prefix was different, to guarantee no overlap, but that\u0027s not necessary if names are carefully chosen. As for your second question, no, there would be no feature conflict that I can see. They both can coexist.",
      "parentUuid": "007bf913_29eec15a",
      "range": {
        "startLine": 300,
        "startChar": 9,
        "endLine": 300,
        "endChar": 19
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7905d6a_dab7e4ae",
        "filename": "include/sdrutils.hpp",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-27T18:59:06Z",
      "side": 1,
      "message": "\u003e As for phosphor-pid-control internally-generated sensors, I\u0027m not sure why they used the /extsensor/ name prefix, but I\u0027m sure there was a reason. Perhaps venture@ might know? Does anybody still have any active deployments that depend on this naming?\n\nI suspect it\u0027s because something didn\u0027t exist at the time, so Patrick built something that did what he needed.  I would expect anything that needs this behavior should be moving to external sensor, so this code isn\u0027t necessary to have on master, and propagates a known incorrect API.\n\n\n\u003e \n\u003e I did not change it, on purpose, because I didn\u0027t want to break existing configuration, and if it\u0027s still working and not causing problems, I see no reason to change it. I\u0027m open to changing it for new deployments, however.\n\n\nSure, but this code is proposing we now include it in ipmi-dynamic, which has a solution here.\n\n\u003e \n\u003e There is no overlap between dbus-sensors FanSensor and ExternalSensor objects, and these phosphor-pid-control internally-generated sensor objects.\n\nThere isn\u0027t?  Isn\u0027t this doing exactly the same thing as those two?\n\n\u003e That might be one of the reasons the name prefix was different, to guarantee no overlap, but that\u0027s not necessary if names are carefully chosen. As for your second question, no, there would be no feature conflict that I can see. They both can coexist.\n\nnot from an interface perspective they can\u0027t.  If we want to propose this change to phosphor-dbus-interfaces, we can, but I suspect we\u0027re going to get told that the existing APIs meet this need already.",
      "parentUuid": "daeea2a6_138358c8",
      "range": {
        "startLine": 300,
        "startChar": 9,
        "endLine": 300,
        "endChar": 19
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7d406ba_1cf0084e",
        "filename": "include/sdrutils.hpp",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-04-27T22:15:49Z",
      "side": 1,
      "message": "It seems like there are more discussion that is needed for pid\u0027s `/extsensor/` vs dbus-sensors FanSensor and ExternalSensor.\n\nI think the best course of action to get this moving is to remove `/extsensor/` from this patch for now and we will test it internally the new dbus-sensors configurations and add a new patch moving forware.\n\nI do think it is better that we use d-bus sensors if it provides same/similar functionalities.",
      "parentUuid": "c7905d6a_dab7e4ae",
      "range": {
        "startLine": 300,
        "startChar": 9,
        "endLine": 300,
        "endChar": 19
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f73a034c_c097f32c",
        "filename": "include/sdrutils.hpp",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-27T22:28:48Z",
      "side": 1,
      "message": "👍",
      "parentUuid": "c7d406ba_1cf0084e",
      "range": {
        "startLine": 300,
        "startChar": 9,
        "endLine": 300,
        "endChar": 19
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2077f1c1_d236db08",
        "filename": "include/sdrutils.hpp",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-04-28T00:14:27Z",
      "side": 1,
      "message": "\u003e I think the best course of action to get this moving is to remove `/extsensor/` from this patch for now and we will test it internally the new dbus-sensors configurations and add a new patch moving forware.\n\n+1",
      "parentUuid": "f73a034c_c097f32c",
      "range": {
        "startLine": 300,
        "startChar": 9,
        "endLine": 300,
        "endChar": 19
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2702e91_9bb936f8",
        "filename": "include/sdrutils.hpp",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-04-28T15:48:57Z",
      "side": 1,
      "message": "Done. please take a look again.",
      "parentUuid": "2077f1c1_d236db08",
      "range": {
        "startLine": 300,
        "startChar": 9,
        "endLine": 300,
        "endChar": 19
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3bb88be7_5febda40",
        "filename": "include/sdrutils.hpp",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-04-29T03:45:01Z",
      "side": 1,
      "message": "Some update... \n\nconfirmed that this works fine without the `extsensors`... turns out we are not even using it internally.",
      "parentUuid": "e2702e91_9bb936f8",
      "range": {
        "startLine": 300,
        "startChar": 9,
        "endLine": 300,
        "endChar": 19
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2617471_2001c0e1",
        "filename": "src/sensorcommands.cpp",
        "patchSetId": 6
      },
      "lineNbr": 364,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-31T17:48:12Z",
      "side": 1,
      "message": "Needing to forward declare stuff like this generally implies that the code needs to be restructured, and these definitions put in the relevant header files.",
      "range": {
        "startLine": 362,
        "startChar": 0,
        "endLine": 364,
        "endChar": 50
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc37f6a8_ea135ca7",
        "filename": "src/sensorcommands.cpp",
        "patchSetId": 6
      },
      "lineNbr": 364,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-04-01T18:55:58Z",
      "side": 1,
      "message": "Do we want to expose this function to other code? Does that matter at all?",
      "parentUuid": "d2617471_2001c0e1",
      "range": {
        "startLine": 362,
        "startChar": 0,
        "endLine": 364,
        "endChar": 50
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18e3d19a_94f3dc15",
        "filename": "src/sensorcommands.cpp",
        "patchSetId": 6
      },
      "lineNbr": 364,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-01T21:20:34Z",
      "side": 1,
      "message": "Doesn\u0027t seem unreasonable to expose to other compile units.",
      "parentUuid": "fc37f6a8_ea135ca7",
      "range": {
        "startLine": 362,
        "startChar": 0,
        "endLine": 364,
        "endChar": 50
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2dfb8283_1aa21ac5",
        "filename": "src/sensorcommands.cpp",
        "patchSetId": 6
      },
      "lineNbr": 364,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-04-05T23:35:26Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "18e3d19a_94f3dc15",
      "range": {
        "startLine": 362,
        "startChar": 0,
        "endLine": 364,
        "endChar": 50
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3dc4e0df_d7c7e11f",
        "filename": "src/sensorcommands.cpp",
        "patchSetId": 6
      },
      "lineNbr": 461,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-31T17:48:12Z",
      "side": 1,
      "message": "This seems like an odd check to do here.  It requires caching of values, which really should be avoided if possible.  Should this instead just rely on the sensor itself to block unsupported writes?",
      "range": {
        "startLine": 457,
        "startChar": 0,
        "endLine": 461,
        "endChar": 5
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22bdbad7_2218de34",
        "filename": "src/sensorcommands.cpp",
        "patchSetId": 6
      },
      "lineNbr": 461,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-04-01T18:55:58Z",
      "side": 1,
      "message": "I guess we can just catch the error in setDbusProperty? when writing unsupported writes?\n\n@Josh, is there a reason that we don\u0027t just let the sensor write fail itself?",
      "parentUuid": "3dc4e0df_d7c7e11f",
      "range": {
        "startLine": 457,
        "startChar": 0,
        "endLine": 461,
        "endChar": 5
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7edd4ae_ef8eb581",
        "filename": "src/sensorcommands.cpp",
        "patchSetId": 6
      },
      "lineNbr": 461,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-01T21:20:34Z",
      "side": 1,
      "message": "\u003e I guess we can just catch the error in setDbusProperty? when writing unsupported writes?\n\n+1.  This is also what Quanta is working on implementing, and what was discussed on the mailing list.  That keeps us consistent between ipmi and redfish.\n\n\u003e \n\u003e @Josh, is there a reason that we don\u0027t just let the sensor write fail itself?",
      "parentUuid": "22bdbad7_2218de34",
      "range": {
        "startLine": 457,
        "startChar": 0,
        "endLine": 461,
        "endChar": 5
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d139b0c4_f2cb04e9",
        "filename": "src/sensorcommands.cpp",
        "patchSetId": 6
      },
      "lineNbr": 461,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-04-02T03:03:28Z",
      "side": 1,
      "message": "Right now, there\u0027s no checking in setDbusProperty, so it allows all writing to be done. In fact, this is called \"override mode\" in dbus-sensors, and is supported for testing purposes. I\u0027m not sure if it\u0027s something we should be exposing to the external world via IPMI.\n\nIt opens up a security hole if we allow all sensors to be freely written to, by external IPMI users. That\u0027s why I wanted to add the \"Mutable\" property, to the D-Bus sensor interface. I wish that feature had been accepted, it would have made this design simpler.\n\nThe \"Mutable\" field could be checked, by an external server like IPMI or Redfish, and use that to validate user permissions when they are trying to perform a sensor write. Then, we could preserve the ability for \"override mode\" during internal testing, and still be able to lock down sensor values we don\u0027t want external users to be able to modify.",
      "parentUuid": "a7edd4ae_ef8eb581",
      "range": {
        "startLine": 457,
        "startChar": 0,
        "endLine": 461,
        "endChar": 5
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9098f28d_e9f9b33f",
        "filename": "src/sensorcommands.cpp",
        "patchSetId": 6
      },
      "lineNbr": 461,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-04-02T03:08:59Z",
      "side": 1,
      "message": "FYI, here\u0027s where \"Mutable\" was: https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/36275",
      "parentUuid": "d139b0c4_f2cb04e9",
      "range": {
        "startLine": 457,
        "startChar": 0,
        "endLine": 461,
        "endChar": 5
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7bdc8034_e5ac8d15",
        "filename": "src/sensorcommands.cpp",
        "patchSetId": 6
      },
      "lineNbr": 461,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-04-06T20:25:38Z",
      "side": 1,
      "message": "So we want to have the ability to prevent write to sensors that supports write operation?\n\nHow do we want to approach this?",
      "parentUuid": "9098f28d_e9f9b33f",
      "range": {
        "startLine": 457,
        "startChar": 0,
        "endLine": 461,
        "endChar": 5
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e16c0b98_6c90cb75",
        "filename": "src/sensorcommands.cpp",
        "patchSetId": 6
      },
      "lineNbr": 461,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-06T20:33:41Z",
      "side": 1,
      "message": "\u003e I\u0027m not sure if it\u0027s something we should be exposing to the external world via IPMI.\n\nAgreed, it should be behind the validation flag, but in the sensor itself.\n\n\u003e It opens up a security hole if we allow all sensors to be freely written to, by external IPMI users. That\u0027s why I wanted to add the \"Mutable\" property, to the D-Bus sensor interface. I wish that feature had been accepted, it would have made this design simpler.\n\nThe mutable interface seems fine to me, but in this context, it should be used to ONLY set the SDR, the sensors need to own enforcement of their own policies to avoid keeping a bunch of state tables like this.\n\n\n\u003eThe \"Mutable\" field could be checked, by an external server like IPMI or Redfish, and use that to validate user permissions when they are trying to perform a sensor write. \n\nNotice the \"OR\" in your statement, that means we\u0027re duplicating logic between the two interfaces for something that isn\u0027t interface specific.  If we need it in both places (which in this case we do) then it needs to go in the common place, the sensor itself.\n\n\n\n\u003e Then, we could preserve the ability for \"override mode\" during internal testing, and still be able to lock down sensor values we don\u0027t want external users to be able to modify.\n\nThis can still be done in the sensor itself, like I proposed on the mailing list.\n\n\u003e So we want to have the ability to prevent write to sensors that supports write operation?\n\n\nYes, but it needs to be enforced by the sensor itself, not in the IPMI layer, otherwise we need to duplicate a bunch of logic between IPMI and Redfish, and keep state tables in both places.\n\n\u003e \n\u003e How do we want to approach this?\n\nSee above.\n\n\nAs a design principal, IPMI should be a thin wrapper around dbus, relying on it to enforce policy as much as possible.  This means that we\u0027re not constantly duplicating logic between interfaces, and when new interfaces like PLDM or RDE come around, they\u0027re not duplicating them for a third and fourth time.",
      "parentUuid": "7bdc8034_e5ac8d15",
      "range": {
        "startLine": 457,
        "startChar": 0,
        "endLine": 461,
        "endChar": 5
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2068c088_ba6b8cf5",
        "filename": "src/sensorcommands.cpp",
        "patchSetId": 6
      },
      "lineNbr": 461,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-04-09T21:40:45Z",
      "side": 1,
      "message": "Your comments have merit, however, it will have to be server-specific work. IPMI has its own bit in the SDR that tells clients what the permission is: read-write or read-only. This is IPMI-specific, by definition. Also, the server will need to check these permissions, just as it already checks other input coming from the user for validity. Otherwise, it wouldn\u0027t be a very secure or robust server. Redfish will have the same concerns. However, making this permission check is trivial, so it should be simple to add, regardless of what service is in use.\n\nThe permissions already come from one place, as you said: the Mutable flag, in D-Bus. There would be no duplication here. The various services won\u0027t need to each keep track of this, unless they wanted to do some optional caching (to avoid excessive D-Bus calls). There\u0027s no need for state tables, as this carries no state: it\u0027s just a boolean, either true or false, used to let the server make the permissions check before allowing the write to go through.\n\nAs for the sensors, the sensor daemons in dbus-sensors make the decision whether or not to be mutable. It comes from configuration in entity-manager, same as the other parameters of each sensor. I have a WIP patch https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/36275 that supports this. It\u0027s a simple flag added to each sensor, that is then exposed over D-Bus, so the servers can read it.",
      "parentUuid": "e16c0b98_6c90cb75",
      "range": {
        "startLine": 457,
        "startChar": 0,
        "endLine": 461,
        "endChar": 5
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f0f7a8a_a0b4cd5d",
        "filename": "src/sensorcommands.cpp",
        "patchSetId": 6
      },
      "lineNbr": 461,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-09T22:46:10Z",
      "side": 1,
      "message": "\u003e Your comments have merit, however, it will have to be server-specific work. IPMI has its own bit in the SDR that tells clients what the permission is: read-write or read-only. This is IPMI-specific, by definition. Also, the server will need to check these permissions, just as it already checks other input coming from the user for validity.\n\nI agree with the first half, disagree with the second.  I would much rather IPMI itself not check against those bits.  If a sensor publishes mutable but isn\u0027t, or doesn\u0027t publish mutable, but is, that\u0027s a bug on dbus, not a bug in IPMI.\n\n\u003e Otherwise, it wouldn\u0027t be a very secure or robust server.\n\nNot sure I agree there.  These aren\u0027t ACLs.  Can you elaborate on what\u0027s less robust about putting logic in the sensors themselves?  I would\u0027ve thought it would be more robust, because we wouldn\u0027t be duplicating logic, and we\u0027d be putting the checks in the component responsible for them.\n\n\u003e Redfish will have the same concerns. However, making this permission check is trivial, so it should be simple to add, regardless of what service is in use.\n\nWith respect, this permissions check is non-trivial, and as this patchset shows and requires maintaining a state cache or doing two calls for every request;  For something that\u0027s heavily used, that duplication of dbus reqeusts is waste of effort.  The per-request overhead on dbus is largely the driver of any dbus performance, so we should minimize requests where possible.\n\n\u003e \n\u003e The permissions already come from one place, as you said: the Mutable flag, in D-Bus. There would be no duplication here. The various services won\u0027t need to each keep track of this, unless they wanted to do some optional caching (to avoid excessive D-Bus calls). There\u0027s no need for state tables, as this carries no state: it\u0027s just a boolean, either true or false, used to let the server make the permissions check before allowing the write to go through.\n\nI didn\u0027t think about this until after, but rest-dbus should need to be correct, which doesn\u0027t have its own ACLs, and relies on dbus daemons to enforce correctness.  PLDM is in the same boat.\n\nThis would need to track a bool per-sensor, so some kind of table is needed, it\u0027s not just a single boolean.\n\nSo if this patchset wants to add that to Redfish, PLDM, IPMI, and rest-dbus, I guess we could, but that seems way worse than just enforcing it in the sensor subsystem.\n\n\u003e \n\u003e As for the sensors, the sensor daemons in dbus-sensors make the decision whether or not to be mutable. It comes from configuration in entity-manager, same as the other parameters of each sensor. I have a WIP patch https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/36275 that supports this. It\u0027s a simple flag added to each sensor, that is then exposed over D-Bus, so the servers can read it.\n\nYep, I think that patchset is part of what\u0027s needed, we probably need to get the other reviews rebased and updated as well.",
      "parentUuid": "2068c088_ba6b8cf5",
      "range": {
        "startLine": 457,
        "startChar": 0,
        "endLine": 461,
        "endChar": 5
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}