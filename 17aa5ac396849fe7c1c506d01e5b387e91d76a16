{
  "comments": [
    {
      "key": {
        "uuid": "7a26dd37_27d2169c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 15,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-31T17:48:12Z",
      "side": 1,
      "message": "I don\u0027t think this is true anymore.  ExternalSensor now provides the correct dbus paths.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 15,
        "endChar": 42
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ffa1ca4_22ca2260",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 15,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-04-01T18:55:58Z",
      "side": 1,
      "message": "Are they all under sensors/ path now?\n\nJosh@, do we have that issue internally?",
      "parentUuid": "7a26dd37_27d2169c",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 15,
        "endChar": 42
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "266f452a_47f87d68",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-31T17:48:12Z",
      "side": 1,
      "message": "Sensor set?",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 44,
        "endChar": 34
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0cf6a906_0e23c180",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-04-01T18:55:58Z",
      "side": 1,
      "message": "Ack. I accidentally removed the message from the last patch.",
      "parentUuid": "266f452a_47f87d68",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 44,
        "endChar": 34
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d061383a_71ab584e",
        "filename": "include/sdrutils.hpp",
        "patchSetId": 6
      },
      "lineNbr": 229,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-31T17:48:12Z",
      "side": 1,
      "message": "Does this class need to exist?  It\u0027s essentially a fancy wrapper around bool.  I suspect you can just use bool (or possibly enum class if you want to keep the definitions).",
      "range": {
        "startLine": 214,
        "startChar": 0,
        "endLine": 229,
        "endChar": 2
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53cdcbe6_6cc6345c",
        "filename": "include/sdrutils.hpp",
        "patchSetId": 6
      },
      "lineNbr": 229,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-04-01T18:55:58Z",
      "side": 1,
      "message": "Josh added this and in the original changes he mentioned that he needs it as a prerequisite for some new features that he wants.\n\nMaybe we can add that once that features comes in later?",
      "parentUuid": "d061383a_71ab584e",
      "range": {
        "startLine": 214,
        "startChar": 0,
        "endLine": 229,
        "endChar": 2
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d131799_76e86cef",
        "filename": "include/sdrutils.hpp",
        "patchSetId": 6
      },
      "lineNbr": 229,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-01T21:20:34Z",
      "side": 1,
      "message": "\u003e Josh added this and in the original changes he mentioned that he needs it as a prerequisite for some new features that he wants.\n\u003e \n\u003e Maybe we can add that once that features comes in later?\n\nFor the moment lets keep it simple.  If we need to add this class later for the features that necessitate it, we can always add it back then.",
      "parentUuid": "53cdcbe6_6cc6345c",
      "range": {
        "startLine": 214,
        "startChar": 0,
        "endLine": 229,
        "endChar": 2
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa0c7c3a_a4662671",
        "filename": "include/sdrutils.hpp",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-31T17:48:12Z",
      "side": 1,
      "message": "The current external sensors in dbus-sensors doesn\u0027t define a new dbus namespace.  I suspect this isn\u0027t needed.",
      "range": {
        "startLine": 300,
        "startChar": 9,
        "endLine": 300,
        "endChar": 19
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac42f666_75c27253",
        "filename": "include/sdrutils.hpp",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-04-01T18:55:58Z",
      "side": 1,
      "message": "Are they all under sensors/ now?",
      "parentUuid": "aa0c7c3a_a4662671",
      "range": {
        "startLine": 300,
        "startChar": 9,
        "endLine": 300,
        "endChar": 19
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6453765d_26ada2f8",
        "filename": "include/sdrutils.hpp",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-01T21:20:34Z",
      "side": 1,
      "message": "yes: https://github.com/openbmc/dbus-sensors/blob/6205092af8f265933f11c3b92c4ca87f2b3bb8a2/src/ExternalSensor.cpp#L44",
      "parentUuid": "ac42f666_75c27253",
      "range": {
        "startLine": 300,
        "startChar": 9,
        "endLine": 300,
        "endChar": 19
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2617471_2001c0e1",
        "filename": "src/sensorcommands.cpp",
        "patchSetId": 6
      },
      "lineNbr": 364,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-31T17:48:12Z",
      "side": 1,
      "message": "Needing to forward declare stuff like this generally implies that the code needs to be restructured, and these definitions put in the relevant header files.",
      "range": {
        "startLine": 362,
        "startChar": 0,
        "endLine": 364,
        "endChar": 50
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc37f6a8_ea135ca7",
        "filename": "src/sensorcommands.cpp",
        "patchSetId": 6
      },
      "lineNbr": 364,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-04-01T18:55:58Z",
      "side": 1,
      "message": "Do we want to expose this function to other code? Does that matter at all?",
      "parentUuid": "d2617471_2001c0e1",
      "range": {
        "startLine": 362,
        "startChar": 0,
        "endLine": 364,
        "endChar": 50
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18e3d19a_94f3dc15",
        "filename": "src/sensorcommands.cpp",
        "patchSetId": 6
      },
      "lineNbr": 364,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-01T21:20:34Z",
      "side": 1,
      "message": "Doesn\u0027t seem unreasonable to expose to other compile units.",
      "parentUuid": "fc37f6a8_ea135ca7",
      "range": {
        "startLine": 362,
        "startChar": 0,
        "endLine": 364,
        "endChar": 50
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3dc4e0df_d7c7e11f",
        "filename": "src/sensorcommands.cpp",
        "patchSetId": 6
      },
      "lineNbr": 461,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-31T17:48:12Z",
      "side": 1,
      "message": "This seems like an odd check to do here.  It requires caching of values, which really should be avoided if possible.  Should this instead just rely on the sensor itself to block unsupported writes?",
      "range": {
        "startLine": 457,
        "startChar": 0,
        "endLine": 461,
        "endChar": 5
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22bdbad7_2218de34",
        "filename": "src/sensorcommands.cpp",
        "patchSetId": 6
      },
      "lineNbr": 461,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-04-01T18:55:58Z",
      "side": 1,
      "message": "I guess we can just catch the error in setDbusProperty? when writing unsupported writes?\n\n@Josh, is there a reason that we don\u0027t just let the sensor write fail itself?",
      "parentUuid": "3dc4e0df_d7c7e11f",
      "range": {
        "startLine": 457,
        "startChar": 0,
        "endLine": 461,
        "endChar": 5
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7edd4ae_ef8eb581",
        "filename": "src/sensorcommands.cpp",
        "patchSetId": 6
      },
      "lineNbr": 461,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-01T21:20:34Z",
      "side": 1,
      "message": "\u003e I guess we can just catch the error in setDbusProperty? when writing unsupported writes?\n\n+1.  This is also what Quanta is working on implementing, and what was discussed on the mailing list.  That keeps us consistent between ipmi and redfish.\n\n\u003e \n\u003e @Josh, is there a reason that we don\u0027t just let the sensor write fail itself?",
      "parentUuid": "22bdbad7_2218de34",
      "range": {
        "startLine": 457,
        "startChar": 0,
        "endLine": 461,
        "endChar": 5
      },
      "revId": "17aa5ac396849fe7c1c506d01e5b387e91d76a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}