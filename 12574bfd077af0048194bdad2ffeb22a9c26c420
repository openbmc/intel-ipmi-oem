{
  "comments": [
    {
      "key": {
        "uuid": "842d9159_1d9f1481",
        "filename": "src/firmware-update.cpp",
        "patchSetId": 3
      },
      "lineNbr": 234,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2021-08-31T04:10:38Z",
      "side": 1,
      "message": "Wouldn\u0027t this to be moved to line number 240 ? i.e.) only after EVP_DigestUpdate() successful.",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 234,
        "endChar": 9
      },
      "revId": "12574bfd077af0048194bdad2ffeb22a9c26c420",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55a922ad_b30b2530",
        "filename": "src/firmware-update.cpp",
        "patchSetId": 3
      },
      "lineNbr": 234,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2021-08-31T04:44:03Z",
      "side": 1,
      "message": "Good catch, This should be after EVP_DigestUpdate() call.",
      "parentUuid": "842d9159_1d9f1481",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 234,
        "endChar": 9
      },
      "revId": "12574bfd077af0048194bdad2ffeb22a9c26c420",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63a98dd2_94df0b28",
        "filename": "src/firmware-update.cpp",
        "patchSetId": 3
      },
      "lineNbr": 234,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-08-31T06:38:55Z",
      "side": 1,
      "message": "The original code flow was making started \u003d true irrespective of EVP_DigestUpdate \u003d\u003d openSslSuccess, that is why I have kept the same flow. If this needs to be moved to line 240, should I force started \u003d false in case of failure (in case started was \u003d true at line 231)?",
      "parentUuid": "55a922ad_b30b2530",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 234,
        "endChar": 9
      },
      "revId": "12574bfd077af0048194bdad2ffeb22a9c26c420",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f16e7bbe_4ff20c26",
        "filename": "src/firmware-update.cpp",
        "patchSetId": 3
      },
      "lineNbr": 234,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-08-31T07:10:06Z",
      "side": 1,
      "message": "clear() function in line number 246 uses if(started) to perform the clean up. So making started \u003d false might be an issue. Also clear() is called when we start image transfer. And object of this class is created in ipmiSetFirmwareUpdateOptions() and since it is a global shared pointer when we call make_shared the old object, if any, is destroyed. So if ipmiGetSetFirmwareUpdateControl()-\u003eimageTransferStart is called before ipmiSetFirmwareUpdateOptions(), clear() is called before we destroy the object and create a fresh one.",
      "parentUuid": "63a98dd2_94df0b28",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 234,
        "endChar": 9
      },
      "revId": "12574bfd077af0048194bdad2ffeb22a9c26c420",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25fbff99_48a42706",
        "filename": "src/firmware-update.cpp",
        "patchSetId": 3
      },
      "lineNbr": 234,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-09-03T16:48:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f16e7bbe_4ff20c26",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 234,
        "endChar": 9
      },
      "revId": "12574bfd077af0048194bdad2ffeb22a9c26c420",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a06055ba_f216b19a",
        "filename": "src/firmware-update.cpp",
        "patchSetId": 3
      },
      "lineNbr": 239,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2021-08-31T04:04:30Z",
      "side": 1,
      "message": "This case also you need to go for clean up ctx right? Why its not done here? Is caller of this hash(), doing cleanup up on failure? Please confirm.",
      "range": {
        "startLine": 236,
        "startChar": 6,
        "endLine": 239,
        "endChar": 9
      },
      "revId": "12574bfd077af0048194bdad2ffeb22a9c26c420",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a38b6fc5_919c237f",
        "filename": "src/firmware-update.cpp",
        "patchSetId": 3
      },
      "lineNbr": 239,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-08-31T06:38:55Z",
      "side": 1,
      "message": "hash function does not call EVP_MD_CTX_create(), that is why we are not calling EVP_MD_CTX_destroy(ctx) in hash function. In all the functions where EVP_MD_CTX_create() is called we are calling EVP_MD_CTX_destroy(ctx) on failure. EVP_MD_CTX_destroy(ctx) is also called from destructor, making sure ctx won\u0027t leak memory.",
      "parentUuid": "a06055ba_f216b19a",
      "range": {
        "startLine": 236,
        "startChar": 6,
        "endLine": 239,
        "endChar": 9
      },
      "revId": "12574bfd077af0048194bdad2ffeb22a9c26c420",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "baa291e5_0ab0ff15",
        "filename": "src/firmware-update.cpp",
        "patchSetId": 3
      },
      "lineNbr": 239,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2021-09-01T02:43:41Z",
      "side": 1,
      "message": "Really, we should probably move to EVP_MD_CTX_new/EVP_MD_CTX_free, which is part of the 1.1.1 API rather than the now deprecated EVP_MD_CTX_create/EVP_MD_CTX_destroy. I am not sure how this even still works....\n\nAnother thought, which I have used elsewhere is to create a shared_ptr or unique_ptr (depending on the ownership requirements) that uses a custom type destructor as part of the ptr constructor.\n\nSomething like this:\nstd::unique_ptr\u003cEVP_MD_CTX\u003e ctx(EVP_MD_CTX_new(), EVP_MD_CTX_free);\n\nThen, the smart pointer does all the counting and cleanup for you.",
      "parentUuid": "a38b6fc5_919c237f",
      "range": {
        "startLine": 236,
        "startChar": 6,
        "endLine": 239,
        "endChar": 9
      },
      "revId": "12574bfd077af0048194bdad2ffeb22a9c26c420",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8da93a78_a4b68d4d",
        "filename": "src/firmware-update.cpp",
        "patchSetId": 3
      },
      "lineNbr": 239,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-09-03T16:48:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "baa291e5_0ab0ff15",
      "range": {
        "startLine": 236,
        "startChar": 6,
        "endLine": 239,
        "endChar": 9
      },
      "revId": "12574bfd077af0048194bdad2ffeb22a9c26c420",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a99677d5_c7ef43c6",
        "filename": "src/firmware-update.cpp",
        "patchSetId": 3
      },
      "lineNbr": 282,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2021-08-31T04:04:30Z",
      "side": 1,
      "message": "Same as above, Cleanup required here.",
      "range": {
        "startLine": 279,
        "startChar": 12,
        "endLine": 282,
        "endChar": 13
      },
      "revId": "12574bfd077af0048194bdad2ffeb22a9c26c420",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a529bed5_8728e562",
        "filename": "src/firmware-update.cpp",
        "patchSetId": 3
      },
      "lineNbr": 282,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-08-31T06:41:41Z",
      "side": 1,
      "message": "HashCheck function does not call EVP_MD_CTX_create(), that is why we are not calling EVP_MD_CTX_destroy(ctx) in HashCheck function. In all the functions where EVP_MD_CTX_create() is called we are calling EVP_MD_CTX_destroy(ctx) on failure. EVP_MD_CTX_destroy(ctx) is also called from destructor, making sure ctx won\u0027t leak memory.",
      "parentUuid": "a99677d5_c7ef43c6",
      "range": {
        "startLine": 279,
        "startChar": 12,
        "endLine": 282,
        "endChar": 13
      },
      "revId": "12574bfd077af0048194bdad2ffeb22a9c26c420",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd241e8b_621754d7",
        "filename": "src/firmware-update.cpp",
        "patchSetId": 3
      },
      "lineNbr": 739,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2021-09-01T02:43:41Z",
      "side": 1,
      "message": "sysret is unused",
      "range": {
        "startLine": 739,
        "startChar": 0,
        "endLine": 739,
        "endChar": 15
      },
      "revId": "12574bfd077af0048194bdad2ffeb22a9c26c420",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}