{
  "comments": [
    {
      "key": {
        "uuid": "842d9159_1d9f1481",
        "filename": "src/firmware-update.cpp",
        "patchSetId": 3
      },
      "lineNbr": 234,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2021-08-31T04:10:38Z",
      "side": 1,
      "message": "Wouldn\u0027t this to be moved to line number 240 ? i.e.) only after EVP_DigestUpdate() successful.",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 234,
        "endChar": 9
      },
      "revId": "12574bfd077af0048194bdad2ffeb22a9c26c420",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55a922ad_b30b2530",
        "filename": "src/firmware-update.cpp",
        "patchSetId": 3
      },
      "lineNbr": 234,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2021-08-31T04:44:03Z",
      "side": 1,
      "message": "Good catch, This should be after EVP_DigestUpdate() call.",
      "parentUuid": "842d9159_1d9f1481",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 234,
        "endChar": 9
      },
      "revId": "12574bfd077af0048194bdad2ffeb22a9c26c420",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63a98dd2_94df0b28",
        "filename": "src/firmware-update.cpp",
        "patchSetId": 3
      },
      "lineNbr": 234,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-08-31T06:38:55Z",
      "side": 1,
      "message": "The original code flow was making started \u003d true irrespective of EVP_DigestUpdate \u003d\u003d openSslSuccess, that is why I have kept the same flow. If this needs to be moved to line 240, should I force started \u003d false in case of failure (in case started was \u003d true at line 231)?",
      "parentUuid": "55a922ad_b30b2530",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 234,
        "endChar": 9
      },
      "revId": "12574bfd077af0048194bdad2ffeb22a9c26c420",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a06055ba_f216b19a",
        "filename": "src/firmware-update.cpp",
        "patchSetId": 3
      },
      "lineNbr": 239,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2021-08-31T04:04:30Z",
      "side": 1,
      "message": "This case also you need to go for clean up ctx right? Why its not done here? Is caller of this hash(), doing cleanup up on failure? Please confirm.",
      "range": {
        "startLine": 236,
        "startChar": 6,
        "endLine": 239,
        "endChar": 9
      },
      "revId": "12574bfd077af0048194bdad2ffeb22a9c26c420",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a38b6fc5_919c237f",
        "filename": "src/firmware-update.cpp",
        "patchSetId": 3
      },
      "lineNbr": 239,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-08-31T06:38:55Z",
      "side": 1,
      "message": "hash function does not call EVP_MD_CTX_create(), that is why we are not calling EVP_MD_CTX_destroy(ctx) in hash function. In all the functions where EVP_MD_CTX_create() is called we are calling EVP_MD_CTX_destroy(ctx) on failure. EVP_MD_CTX_destroy(ctx) is also called from destructor, making sure ctx won\u0027t leak memory.",
      "parentUuid": "a06055ba_f216b19a",
      "range": {
        "startLine": 236,
        "startChar": 6,
        "endLine": 239,
        "endChar": 9
      },
      "revId": "12574bfd077af0048194bdad2ffeb22a9c26c420",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a99677d5_c7ef43c6",
        "filename": "src/firmware-update.cpp",
        "patchSetId": 3
      },
      "lineNbr": 282,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2021-08-31T04:04:30Z",
      "side": 1,
      "message": "Same as above, Cleanup required here.",
      "range": {
        "startLine": 279,
        "startChar": 12,
        "endLine": 282,
        "endChar": 13
      },
      "revId": "12574bfd077af0048194bdad2ffeb22a9c26c420",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a529bed5_8728e562",
        "filename": "src/firmware-update.cpp",
        "patchSetId": 3
      },
      "lineNbr": 282,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-08-31T06:41:41Z",
      "side": 1,
      "message": "HashCheck function does not call EVP_MD_CTX_create(), that is why we are not calling EVP_MD_CTX_destroy(ctx) in HashCheck function. In all the functions where EVP_MD_CTX_create() is called we are calling EVP_MD_CTX_destroy(ctx) on failure. EVP_MD_CTX_destroy(ctx) is also called from destructor, making sure ctx won\u0027t leak memory.",
      "parentUuid": "a99677d5_c7ef43c6",
      "range": {
        "startLine": 279,
        "startChar": 12,
        "endLine": 282,
        "endChar": 13
      },
      "revId": "12574bfd077af0048194bdad2ffeb22a9c26c420",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}