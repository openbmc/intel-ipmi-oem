{
  "comments": [
    {
      "key": {
        "uuid": "4f3819c6_8d5540f7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 7,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2021-06-27T18:29:22Z",
      "side": 1,
      "message": "Up on receiving writeFRU command,\n    If IPMI layer cached FRU size is going to be increased beyond its current size because of input write FRU data,\n    {\n        IPMI layer (intel-ipmi-oem) updates the FRU layer (EntityManager_FruDevice.cpp) immediately.  \n        FRU layer have full validation checks and write will return negative completion code if input FRU is invalid.\nhttps://github.com/openbmc/intel-ipmi-oem/blob/3ff6371ba7e5c7f02d6851d6a87e7dbbdfa093e6/src/storagecommands.cpp#L503\n    }\n    else\n    {\n         IPMI layer just updates its IPMI layer FRU cache, and always return success completion code to \u0027ipmitool fru write\u0027 client.\n         IPMI layer flushes its cache to FRU layer every 10-seconds.  The actual write to FRU layer will fail if the FRU cache content is not passing validation checks, but it can not be notified to \u0027ipmitool fru write\u0027 client.\n         This gerrit review code changes forces the IPMI layer FRU cache flush for every write; there by \u0027ipmitool fru write\u0027 client will be correctly notified about completion code.\n     }\n\nPros of this fix:\n    1. Always correct completion code notified to the client.\n    2. FRU write is usually one time, manufacturing mode operation, so performance impact caused by flushing the cache for every FRU write is ignorable.\n\nCons of this fix:\n    1. IPMI spec defines IPMI layer as just interface to FRU layer, and it does not enforce any validation checks in IPMI layer.  So, IPMI cache flushing every 10-seconds still correct implementation meeting spec.  IPMI FRU caching is beneficial if FRU write is performed as multiple 1-byte writes.  No need to change current behavior.\n\n@sunita: Please abandon this review after 1 week, if you don\u0027t hear no requirements/comments for immediate cache write.",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 46
      },
      "revId": "3ddc5ed455c64ee04511bab9175016ebedbd2f48",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0336bbd_84406dd9",
        "filename": "src/storagecommands.cpp",
        "patchSetId": 3
      },
      "lineNbr": 120,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2021-05-31T06:11:27Z",
      "side": 1,
      "message": "Where is this used and modified? I don\u0027t see ay use of this flag.",
      "range": {
        "startLine": 120,
        "startChar": 12,
        "endLine": 120,
        "endChar": 34
      },
      "revId": "3ddc5ed455c64ee04511bab9175016ebedbd2f48",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad4a706a_d8a11cc3",
        "filename": "src/storagecommands.cpp",
        "patchSetId": 3
      },
      "lineNbr": 120,
      "author": {
        "id": 1001094
      },
      "writtenOn": "2021-05-31T07:48:06Z",
      "side": 1,
      "message": "\"Yes. There is no use for this flag now. This can be used in future as a switch to disable/enable the delayed FRU write.  This can also be used by OEM vendors to fall back to old behavior with simple patch changing this flag.\"",
      "parentUuid": "a0336bbd_84406dd9",
      "range": {
        "startLine": 120,
        "startChar": 12,
        "endLine": 120,
        "endChar": 34
      },
      "revId": "3ddc5ed455c64ee04511bab9175016ebedbd2f48",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e463fab0_86a4038c",
        "filename": "src/storagecommands.cpp",
        "patchSetId": 3
      },
      "lineNbr": 513,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2021-06-06T18:15:18Z",
      "side": 1,
      "message": "If you want to fallback to old behavior using flag \u0027delayFruWriteDisabled\u0027, it should be re-written as:\n\ncountWritten \u003d dataToWrite.size();\nif (!delayFruWriteDisabled)\n{\n   countWritten \u003d std::min(fruCache.size(), static_cast\u003csize_t\u003e(0xFF));\n}",
      "range": {
        "startLine": 513,
        "startChar": 8,
        "endLine": 513,
        "endChar": 42
      },
      "revId": "3ddc5ed455c64ee04511bab9175016ebedbd2f48",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}