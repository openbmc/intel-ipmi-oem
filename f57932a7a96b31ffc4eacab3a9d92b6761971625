{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "abc09454_8378f1cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2022-01-19T00:55:23Z",
      "side": 1,
      "message": "The add SEL entry function should be sending all the proper bytes of the SEL as described in the SEL Records Format table in the IPMI spec. This means that the 2-byte Generator ID should already be fully formed (LSB[0] \u003d 0 for system software ID, 1 for I2C addr; LSB[7:1] \u003d ID (already shifted into place))\n\nSo the correct command to send the ECC correctable error entry would use 0x66 as the LSB instead of 0x33 as shown in the commit message.\n\nAs such, this command is implemented correctly. There are some possible values of GeneratorID that are invalid and could possibly be filtered out, but the bytes should simply be passed on to the checkRedfishHooks function as is.\n\nPlease abandon this patch.",
      "revId": "f57932a7a96b31ffc4eacab3a9d92b6761971625",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d372fee9_3d3ef75f",
        "filename": "src/storagecommands.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1200,
      "author": {
        "id": 1001239
      },
      "writtenOn": "2022-01-13T18:16:40Z",
      "side": 1,
      "message": "Please reconfirm when this function is called, generator ID contains LUN, Channel information etc.",
      "revId": "f57932a7a96b31ffc4eacab3a9d92b6761971625",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "693a57e2_5bcf3d9f",
        "filename": "src/storagecommands.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1200,
      "author": {
        "id": 1000416
      },
      "writtenOn": "2022-01-13T18:59:53Z",
      "side": 1,
      "message": "This is part of user request as 9th byte.",
      "parentUuid": "d372fee9_3d3ef75f",
      "revId": "f57932a7a96b31ffc4eacab3a9d92b6761971625",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d636478a_46c29a0d",
        "filename": "src/storagecommands.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1200,
      "author": {
        "id": 1001239
      },
      "writtenOn": "2022-01-18T18:49:17Z",
      "side": 1,
      "message": "As discussed in the call, this function assumes that user will populate the generatorID field. So, no checks/ reconstruction of particular field done. If this is the intent, I am okay with this. Other reviewers including the maintainer should review and approve.",
      "parentUuid": "693a57e2_5bcf3d9f",
      "revId": "f57932a7a96b31ffc4eacab3a9d92b6761971625",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a320e97d_14d59259",
        "filename": "src/storagecommands.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1202,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2022-01-18T23:01:51Z",
      "side": 1,
      "message": "I don\u0027t think this is the logic you want. The shifted LSB high bit will bleed into the low bit of the MSB. If mkgen(x) is the logic above, here are some sample input/output pairs:\nmkgen(ff7f) \u003d fffe\nmkgen(f7ff) \u003d f7fe\nmkgen(5aa5) \u003d 5b4a\nmkgen(5555) \u003d 55aa\nmkgen(aaaa) \u003d ab54\nmkgen(abcd) \u003d ab9a\nmkgen(789a) \u003d 7934\n\nThe reason here is that for \u0026 | \u003c\u003c operators with immediate values, the resulting intermediate value is an integer, not necessarily the size of the original operands. To force the correct value, you would need to do a mask or cast after the shift or do the shift first:\n\ngeneratorID \u003d (generatorID \u0026 0xff00) | ((generatorID \u003c\u003c 1) \u0026 0xff);",
      "range": {
        "startLine": 1202,
        "startChar": 20,
        "endLine": 1202,
        "endChar": 66
      },
      "revId": "f57932a7a96b31ffc4eacab3a9d92b6761971625",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}